<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.linear.dao.DAccountDao">

    <!-- 定义一个用于封装 account 和 user 的resultMap
        property - 在封装对象中的 成员属性名称
        column - 在sql查出来的表中 列名称

            注意如果column有同名的情况时，应该给该列搞一个别名用来区分
     -->
    <resultMap id="accountUserMap" type="daccount">
        <id property="id" column="aid"></id>
        <result property="uid" column="uid"></result>
        <result property="money" column="money"></result>

        <!--user对象的映射-->
        <association property="user" column="uid" javaType="duser">
            <id property="uid" column="id"></id>
            <result property="userName" column="username"></result>
            <result property="address" column="address"></result>
            <result property="sex" column="sex"></result>
            <result property="birthday" column="birthday"></result>
        </association>
    </resultMap>

    <!-- 查找还是一样的查，但是结果指向了resultMap -->
    <select id="findAll" resultMap="accountUserMap">
        select
             u.*, a.* , a.id as aid
        from
             account a,user u
        where
             a.uid=u.id
    </select>


    <!--Tips：如果user的信息非常多，resultMap的方式就不是很好用了，
        此时可以用po类封装一部分我们需要的属性，以该类作为输出对象
        直接resultType指向该类即可。-->
    <select id="findAllSimple" resultType="DAccountUser">
        select a.*, u.username, u.address from account as a, user as u
        where a.uid=u.id
    </select>




</mapper>

